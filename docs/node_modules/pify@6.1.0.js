const processFunction=(e,t,r,n)=>function(...o){return new(0,t.promiseModule)(((c,i)=>{t.multiArgs?o.push(((...e)=>{t.errorFirst?e[0]?i(e):(e.shift(),c(e)):c(e)})):t.errorFirst?o.push(((e,t)=>{e?i(e):c(t)})):o.push(c);const s=this===r?n:this;Reflect.apply(e,s,o)}))},filterCache=new WeakMap;function pify(e,t){t={exclude:[/.+(?:Sync|Stream)$/],errorFirst:!0,promiseModule:Promise,...t};const r=typeof e;if(null===e||"object"!==r&&"function"!==r)throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null===e?"null":r}\``);const n=new WeakMap,o=new Proxy(e,{apply(e,r,c){const i=n.get(e);if(i)return Reflect.apply(i,r,c);const s=t.excludeMain?e:processFunction(e,t,o,e);return n.set(e,s),Reflect.apply(s,r,c)},get(e,r){const c=e[r];if(!((e,r)=>{let n=filterCache.get(e);if(n||(n={},filterCache.set(e,n)),r in n)return n[r];const o=e=>"string"==typeof e||"symbol"==typeof r?r===e:e.test(r),c=Reflect.getOwnPropertyDescriptor(e,r),i=void 0===c||c.writable||c.configurable,s=(t.include?t.include.some((e=>o(e))):!t.exclude.some((e=>o(e))))&&i;return n[r]=s,s})(e,r)||c===Function.prototype[r])return c;const i=n.get(c);if(i)return i;if("function"==typeof c){const r=processFunction(c,t,o,e);return n.set(c,r),r}return c}});return o}export{pify as p};