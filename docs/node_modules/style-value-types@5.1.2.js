const clamp=(e,r)=>t=>Math.max(Math.min(t,r),e),sanitize=e=>e%1?Number(e.toFixed(5)):e,floatRegex=/(-)?([\d]*\.?[\d])+/g,colorRegex=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,singleColorRegex=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function isString(e){return"string"==typeof e}const number={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},alpha=Object.assign(Object.assign({},number),{transform:clamp(0,1)});Object.assign(Object.assign({},number),{default:1});const createUnitType=e=>({test:r=>isString(r)&&r.endsWith(e)&&1===r.split(" ").length,parse:parseFloat,transform:r=>`${r}${e}`}),percent=createUnitType("%");Object.assign(Object.assign({},percent),{parse:e=>percent.parse(e)/100,transform:e=>percent.transform(100*e)});const isColorString=(e,r)=>t=>Boolean(isString(t)&&singleColorRegex.test(t)&&t.startsWith(e)||r&&Object.prototype.hasOwnProperty.call(t,r)),splitColor=(e,r,t)=>s=>{if(!isString(s))return s;const[a,n,o,l]=s.match(floatRegex);return{[e]:parseFloat(a),[r]:parseFloat(n),[t]:parseFloat(o),alpha:void 0!==l?parseFloat(l):1}},hsla={test:isColorString("hsl","hue"),parse:splitColor("hue","saturation","lightness"),transform:({hue:e,saturation:r,lightness:t,alpha:s=1})=>"hsla("+Math.round(e)+", "+percent.transform(sanitize(r))+", "+percent.transform(sanitize(t))+", "+sanitize(alpha.transform(s))+")"},clampRgbUnit=clamp(0,255),rgbUnit=Object.assign(Object.assign({},number),{transform:e=>Math.round(clampRgbUnit(e))}),rgba={test:isColorString("rgb","red"),parse:splitColor("red","green","blue"),transform:({red:e,green:r,blue:t,alpha:s=1})=>"rgba("+rgbUnit.transform(e)+", "+rgbUnit.transform(r)+", "+rgbUnit.transform(t)+", "+sanitize(alpha.transform(s))+")"};function parseHex(e){let r="",t="",s="",a="";return e.length>5?(r=e.substr(1,2),t=e.substr(3,2),s=e.substr(5,2),a=e.substr(7,2)):(r=e.substr(1,1),t=e.substr(2,1),s=e.substr(3,1),a=e.substr(4,1),r+=r,t+=t,s+=s,a+=a),{red:parseInt(r,16),green:parseInt(t,16),blue:parseInt(s,16),alpha:a?parseInt(a,16)/255:1}}const hex={test:isColorString("#"),parse:parseHex,transform:rgba.transform},color={test:e=>rgba.test(e)||hex.test(e)||hsla.test(e),parse:e=>rgba.test(e)?rgba.parse(e):hsla.test(e)?hsla.parse(e):hex.parse(e),transform:e=>isString(e)?e:e.hasOwnProperty("red")?rgba.transform(e):hsla.transform(e)},colorToken="${c}",numberToken="${n}";function test(e){var r,t,s,a;return isNaN(e)&&isString(e)&&(null!==(t=null===(r=e.match(floatRegex))||void 0===r?void 0:r.length)&&void 0!==t?t:0)+(null!==(a=null===(s=e.match(colorRegex))||void 0===s?void 0:s.length)&&void 0!==a?a:0)>0}function analyse(e){"number"==typeof e&&(e=`${e}`);const r=[];let t=0;const s=e.match(colorRegex);s&&(t=s.length,e=e.replace(colorRegex,"${c}"),r.push(...s.map(color.parse)));const a=e.match(floatRegex);return a&&(e=e.replace(floatRegex,"${n}"),r.push(...a.map(number.parse))),{values:r,numColors:t,tokenised:e}}function parse(e){return analyse(e).values}function createTransformer(e){const{values:r,numColors:t,tokenised:s}=analyse(e),a=r.length;return e=>{let r=s;for(let s=0;s<a;s++)r=r.replace(s<t?"${c}":"${n}",s<t?color.transform(e[s]):sanitize(e[s]));return r}}const convertNumbersToZero=e=>"number"==typeof e?0:e;function getAnimatableNone(e){const r=parse(e);return createTransformer(e)(r.map(convertNumbersToZero))}const complex={test:test,parse:parse,createTransformer:createTransformer,getAnimatableNone:getAnimatableNone};export{hsla as a,color as b,complex as c,hex as h,rgba as r};