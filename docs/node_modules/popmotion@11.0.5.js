import{h as hex,r as rgba,a as hsla,c as complex,b as color}from"./style-value-types@5.1.2.js";import{i as invariant}from"./hey-listen@1.0.8.js";const clamp=(e,r,t)=>Math.min(Math.max(t,e),r),progress=(e,r,t)=>{const n=r-e;return 0===n?1:(t-e)/n},mix=(e,r,t)=>-t*e+t*r+e;function hueToRgb(e,r,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?e+6*(r-e)*t:t<.5?r:t<2/3?e+(r-e)*(2/3-t)*6:e}function hslaToRgba({hue:e,saturation:r,lightness:t,alpha:n}){e/=360,t/=100;let o=0,a=0,s=0;if(r/=100){const n=t<.5?t*(1+r):t+r-t*r,i=2*t-n;o=hueToRgb(i,n,e+1/3),a=hueToRgb(i,n,e),s=hueToRgb(i,n,e-1/3)}else o=a=s=t;return{red:Math.round(255*o),green:Math.round(255*a),blue:Math.round(255*s),alpha:n}}const mixLinearColor=(e,r,t)=>{const n=e*e,o=r*r;return Math.sqrt(Math.max(0,t*(o-n)+n))},colorTypes=[hex,rgba,hsla],getColorType=e=>colorTypes.find((r=>r.test(e))),mixColor=(e,r)=>{let t=getColorType(e),n=getColorType(r),o=t.parse(e),a=n.parse(r);t===hsla&&(o=hslaToRgba(o),t=rgba),n===hsla&&(a=hslaToRgba(a),n=rgba);const s=Object.assign({},o);return e=>{for(const r in s)"alpha"!==r&&(s[r]=mixLinearColor(o[r],a[r],e));return s.alpha=mix(o.alpha,a.alpha,e),t.transform(s)}},isNum=e=>"number"==typeof e,combineFunctions=(e,r)=>t=>r(e(t)),pipe=(...e)=>e.reduce(combineFunctions);function getMixer(e,r){return"number"==typeof e?t=>mix(e,r,t):color.test(e)?mixColor(e,r):mixComplex(e,r)}const mixArray=(e,r)=>{const t=[...e],n=t.length,o=e.map(((e,t)=>getMixer(e,r[t])));return e=>{for(let r=0;r<n;r++)t[r]=o[r](e);return t}},mixObject=(e,r)=>{const t=Object.assign(Object.assign({},e),r),n={};for(const o in t)void 0!==e[o]&&void 0!==r[o]&&(n[o]=getMixer(e[o],r[o]));return e=>{for(const r in n)t[r]=n[r](e);return t}};function analyse(e){const r=complex.parse(e),t=r.length;let n=0,o=0,a=0;for(let e=0;e<t;e++)n||"number"==typeof r[e]?n++:void 0!==r[e].hue?a++:o++;return{parsed:r,numNumbers:n,numRGB:o,numHSL:a}}const mixComplex=(e,r)=>{const t=complex.createTransformer(r),n=analyse(e),o=analyse(r);return n.numHSL===o.numHSL&&n.numRGB===o.numRGB&&n.numNumbers>=o.numNumbers?pipe(mixArray(n.parsed,o.parsed),t):t=>`${t>0?r:e}`},mixNumber=(e,r)=>t=>mix(e,r,t);function detectMixerFactory(e){return"number"==typeof e?mixNumber:"string"==typeof e?color.test(e)?mixColor:mixComplex:Array.isArray(e)?mixArray:"object"==typeof e?mixObject:void 0}function createMixers(e,r,t){const n=[],o=t||detectMixerFactory(e[0]),a=e.length-1;for(let t=0;t<a;t++){let a=o(e[t],e[t+1]);if(r){const e=Array.isArray(r)?r[t]:r;a=pipe(e,a)}n.push(a)}return n}function fastInterpolate([e,r],[t]){return n=>t(progress(e,r,n))}function slowInterpolate(e,r){const t=e.length,n=t-1;return o=>{let a=0,s=!1;if(o<=e[0]?s=!0:o>=e[n]&&(a=n-1,s=!0),!s){let r=1;for(;r<t&&!(e[r]>o||r===n);r++);a=r-1}const i=progress(e[a],e[a+1],o);return r[a](i)}}function interpolate(e,r,{clamp:t=!0,ease:n,mixer:o}={}){const a=e.length;invariant(a===r.length),invariant(!n||!Array.isArray(n)||n.length===a-1),e[0]>e[a-1]&&(e=[].concat(e),r=[].concat(r),e.reverse(),r.reverse());const s=createMixers(r,n,o),i=2===a?fastInterpolate(e,s):slowInterpolate(e,s);return t?r=>i(clamp(e[0],e[a-1],r)):i}export{interpolate as i};