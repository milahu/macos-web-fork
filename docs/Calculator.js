import { S as SvelteComponent, i as init, s as safe_not_equal, W as assign, X as svg_element, Y as set_svg_attributes, h as insert, Z as get_spread_update, n as noop, m as detach, _ as exclude_internal_props, e as element, a as space, G as create_component, b as attr, d as set_style, j as append, H as mount_component, A as transition_in, D as transition_out, I as destroy_component } from './node_modules/svelte@3.53.1.js';

/* ~icons/ic/outline-plus.svelte generated by Svelte v3.53.1 */

function create_fragment$7(ctx) {
	let svg;
	let raw_value = `<path fill="currentColor" d="M19 12.998h-6v6h-2v-6H5v-2h6v-6h2v6h6z"/>` + "";

	let svg_levels = [
		{ viewBox: "0 0 24 24" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 24 24" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Outline_plus extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$7, safe_not_equal, {});
	}
}

/* ~icons/ic/outline-plus-minus.svelte generated by Svelte v3.53.1 */

function create_fragment$6(ctx) {
	let svg;
	let raw_value = `<path fill="currentColor" d="M19 10.998h-6v6h-2v-6H5v-2h6v-6h2v6h6zm0 10H5v-2h14z"/>` + "";

	let svg_levels = [
		{ viewBox: "0 0 24 24" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 24 24" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Outline_plus_minus extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$6, safe_not_equal, {});
	}
}

/* ~icons/ic/round-equals.svelte generated by Svelte v3.53.1 */

function create_fragment$5(ctx) {
	let svg;
	let raw_value = `<path fill="currentColor" d="M18 9.998H6a1 1 0 1 1 0-2h12a1 1 0 0 1 0 2zm0 6H6a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z"/>` + "";

	let svg_levels = [
		{ viewBox: "0 0 24 24" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 24 24" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Round_equals extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$4, create_fragment$5, safe_not_equal, {});
	}
}

/* ~icons/ic/round-minus.svelte generated by Svelte v3.53.1 */

function create_fragment$4(ctx) {
	let svg;
	let raw_value = `<path fill="currentColor" d="M18 12.998H6a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z"/>` + "";

	let svg_levels = [
		{ viewBox: "0 0 24 24" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 24 24" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Round_minus extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$4, safe_not_equal, {});
	}
}

/* ~icons/icon-park-outline/percentage.svelte generated by Svelte v3.53.1 */

function create_fragment$3(ctx) {
	let svg;
	let raw_value = `<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="4"><circle cx="11" cy="11" r="5"/><circle cx="37" cy="37" r="5"/><path d="M42 6L6 42"/></g>` + "";

	let svg_levels = [
		{ viewBox: "0 0 48 48" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 48 48" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Percentage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$3, safe_not_equal, {});
	}
}

/* ~icons/ph/divide-bold.svelte generated by Svelte v3.53.1 */

function create_fragment$2(ctx) {
	let svg;
	let raw_value = `<path fill="currentColor" d="M228 128a12 12 0 0 1-12 12H40a12 12 0 0 1 0-24h176a12 12 0 0 1 12 12ZM128 84a20 20 0 1 0-20-20a20.1 20.1 0 0 0 20 20Zm0 88a20 20 0 1 0 20 20a20.1 20.1 0 0 0-20-20Z"/>` + "";

	let svg_levels = [
		{ viewBox: "0 0 256 256" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 256 256" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Divide_bold extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$2, safe_not_equal, {});
	}
}

/* ~icons/uil/multiply.svelte generated by Svelte v3.53.1 */

function create_fragment$1(ctx) {
	let svg;
	let raw_value = `<path fill="currentColor" d="m13.41 12l6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29l-6.3 6.29a1 1 0 0 0 0 1.42a1 1 0 0 0 1.42 0l6.29-6.3l6.29 6.3a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.42Z"/>` + "";

	let svg_levels = [
		{ viewBox: "0 0 24 24" },
		{ width: "1.2em" },
		{ height: "1.2em" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			svg.innerHTML = raw_value;
		},
		p(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ viewBox: "0 0 24 24" },
				{ width: "1.2em" },
				{ height: "1.2em" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Multiply extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment$1, safe_not_equal, {});
	}
}

const Calculator_svelte_svelte_type_style_lang = '';

/* src/svelte/components/apps/Calculator/Calculator.svelte generated by Svelte v3.53.1 */

function create_fragment(ctx) {
	let section2;
	let header;
	let t0;
	let section0;
	let t2;
	let section1;
	let button0;
	let t4;
	let button1;
	let plusminusvariant;
	let t5;
	let button2;
	let modulo;
	let t6;
	let button3;
	let division;
	let t7;
	let button4;
	let t9;
	let button5;
	let t11;
	let button6;
	let t13;
	let button7;
	let multiply;
	let t14;
	let button8;
	let t16;
	let button9;
	let t18;
	let button10;
	let t20;
	let button11;
	let minus;
	let t21;
	let button12;
	let t23;
	let button13;
	let t25;
	let button14;
	let t27;
	let button15;
	let plus;
	let t28;
	let button16;
	let t30;
	let button17;
	let t32;
	let button18;
	let equal;
	let current;
	plusminusvariant = new Outline_plus_minus({});
	modulo = new Percentage({});
	division = new Divide_bold({});
	multiply = new Multiply({});
	minus = new Round_minus({});
	plus = new Outline_plus({});
	equal = new Round_equals({});

	return {
		c() {
			section2 = element("section");
			header = element("header");
			t0 = space();
			section0 = element("section");
			section0.textContent = "0";
			t2 = space();
			section1 = element("section");
			button0 = element("button");
			button0.textContent = "AC";
			t4 = space();
			button1 = element("button");
			create_component(plusminusvariant.$$.fragment);
			t5 = space();
			button2 = element("button");
			create_component(modulo.$$.fragment);
			t6 = space();
			button3 = element("button");
			create_component(division.$$.fragment);
			t7 = space();
			button4 = element("button");
			button4.textContent = "7";
			t9 = space();
			button5 = element("button");
			button5.textContent = "8";
			t11 = space();
			button6 = element("button");
			button6.textContent = "9";
			t13 = space();
			button7 = element("button");
			create_component(multiply.$$.fragment);
			t14 = space();
			button8 = element("button");
			button8.textContent = "4";
			t16 = space();
			button9 = element("button");
			button9.textContent = "5";
			t18 = space();
			button10 = element("button");
			button10.textContent = "6";
			t20 = space();
			button11 = element("button");
			create_component(minus.$$.fragment);
			t21 = space();
			button12 = element("button");
			button12.textContent = "1";
			t23 = space();
			button13 = element("button");
			button13.textContent = "2";
			t25 = space();
			button14 = element("button");
			button14.textContent = "3";
			t27 = space();
			button15 = element("button");
			create_component(plus.$$.fragment);
			t28 = space();
			button16 = element("button");
			button16.textContent = "0";
			t30 = space();
			button17 = element("button");
			button17.textContent = ".";
			t32 = space();
			button18 = element("button");
			create_component(equal.$$.fragment);
			attr(header, "class", "app-window-drag-handle svelte-1p61ats");
			attr(section0, "class", "show-area svelte-1p61ats");
			attr(button0, "class", "top-row-button svelte-1p61ats");
			attr(button1, "class", "top-row-button svelte-1p61ats");
			attr(button2, "class", "top-row-button svelte-1p61ats");
			attr(button3, "class", "operation-button svelte-1p61ats");
			attr(button4, "class", "number-button svelte-1p61ats");
			attr(button5, "class", "number-button svelte-1p61ats");
			attr(button6, "class", "number-button svelte-1p61ats");
			attr(button7, "class", "operation-button svelte-1p61ats");
			attr(button8, "class", "number-button svelte-1p61ats");
			attr(button9, "class", "number-button svelte-1p61ats");
			attr(button10, "class", "number-button svelte-1p61ats");
			attr(button11, "class", "operation-button svelte-1p61ats");
			attr(button12, "class", "number-button svelte-1p61ats");
			attr(button13, "class", "number-button svelte-1p61ats");
			attr(button14, "class", "number-button svelte-1p61ats");
			attr(button15, "class", "operation-button svelte-1p61ats");
			attr(button16, "class", "number-button curved-bottom-left-button svelte-1p61ats");
			set_style(button16, "grid-column", `1 / span 2`);
			attr(button17, "class", "number-button svelte-1p61ats");
			attr(button18, "class", "operation-button curved-bottom-right-button svelte-1p61ats");
			attr(section1, "class", "buttons-container svelte-1p61ats");
			attr(section2, "class", "container svelte-1p61ats");
		},
		m(target, anchor) {
			insert(target, section2, anchor);
			append(section2, header);
			append(section2, t0);
			append(section2, section0);
			append(section2, t2);
			append(section2, section1);
			append(section1, button0);
			append(section1, t4);
			append(section1, button1);
			mount_component(plusminusvariant, button1, null);
			append(section1, t5);
			append(section1, button2);
			mount_component(modulo, button2, null);
			append(section1, t6);
			append(section1, button3);
			mount_component(division, button3, null);
			append(section1, t7);
			append(section1, button4);
			append(section1, t9);
			append(section1, button5);
			append(section1, t11);
			append(section1, button6);
			append(section1, t13);
			append(section1, button7);
			mount_component(multiply, button7, null);
			append(section1, t14);
			append(section1, button8);
			append(section1, t16);
			append(section1, button9);
			append(section1, t18);
			append(section1, button10);
			append(section1, t20);
			append(section1, button11);
			mount_component(minus, button11, null);
			append(section1, t21);
			append(section1, button12);
			append(section1, t23);
			append(section1, button13);
			append(section1, t25);
			append(section1, button14);
			append(section1, t27);
			append(section1, button15);
			mount_component(plus, button15, null);
			append(section1, t28);
			append(section1, button16);
			append(section1, t30);
			append(section1, button17);
			append(section1, t32);
			append(section1, button18);
			mount_component(equal, button18, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(plusminusvariant.$$.fragment, local);
			transition_in(modulo.$$.fragment, local);
			transition_in(division.$$.fragment, local);
			transition_in(multiply.$$.fragment, local);
			transition_in(minus.$$.fragment, local);
			transition_in(plus.$$.fragment, local);
			transition_in(equal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(plusminusvariant.$$.fragment, local);
			transition_out(modulo.$$.fragment, local);
			transition_out(division.$$.fragment, local);
			transition_out(multiply.$$.fragment, local);
			transition_out(minus.$$.fragment, local);
			transition_out(plus.$$.fragment, local);
			transition_out(equal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section2);
			destroy_component(plusminusvariant);
			destroy_component(modulo);
			destroy_component(division);
			destroy_component(multiply);
			destroy_component(minus);
			destroy_component(plus);
			destroy_component(equal);
		}
	};
}

class Calculator extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export { Calculator as default };
